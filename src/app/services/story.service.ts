import { Injectable } from '@angular/core';

import firebase from 'firebase';
import { map, take } from 'rxjs/operators';
import { Observable } from 'rxjs';
import { LoadingProvider } from './loading.provider';
import { AlertProvider } from './alert.provider';
import { DataProvider } from './data.provider';
import { AngularFireDatabase } from '@angular/fire/database';

@Injectable()
export class StoryService {

  feeds;

  constructor(
    public loadingProvider: LoadingProvider,
    public alertProvider: AlertProvider,
    private dataProvider: DataProvider,
    public angularDb: AngularFireDatabase) {

    this.feeds = [];

  }


  async getFollowingStories() {
    const user: any = await this.dataProvider.getCurrentUser()
      .pipe(take(1))
      .toPromise();

    this.loadingProvider.hide();
    const { following } = user;
    let storiesList = [user.userId];

    if (following)
      storiesList = [...storiesList, ...following];

    const stories = this.angularDb.list('story').snapshotChanges()
      .pipe(map(snapshot => snapshot.map(item => {
        const data: any = item.payload.val();
        console.log('stories', item);
        const today = new Date();
        const dateCreated = new Date(data.dateCreated);
        if ((storiesList.indexOf(data.storyBy) !== -1)
          && ((Math.abs(today.getTime() - dateCreated.getTime()) / 36e5) <= 24)) {
          return {
            ...data, storyId: item.key,
            seen: data['seenBy'] ? data.seenBy.indexOf(user.userId) !== -1 : false
          };
        }
      }).filter(item => item !== undefined)
      ));

    return stories;
  }



  static buildItem(id, type, length, src, preview, link, seen, time) {
    return {
      "id": id,
      "type": type,
      "length": length,
      "src": src,
      "preview": preview,
      "link": link,
      "seen": seen,
      "time": time
    };
  }

  getFeed() {
    console.log('Gettinf Feeds', this.feeds);
    return this.feeds;
  }



  readStory(storyId: string) {
    const { uid } = firebase.auth().currentUser;
    this.angularDb.list(`/story/${storyId}/seenBy`).push(uid);
  }

  async addStory(obj: any) {

    this.loadingProvider.show();
    const userId = firebase.auth().currentUser.uid;

    const success: any = await this.angularDb.list('story').push({
      // id: "",               // story id
      storyBy: userId,
      photo: obj.userPhoto ? obj.userPhoto : '',            // story photo (or user photo)
      name: obj.userName ? obj.userName : '',             // story name (or user name)
      link: "",             // story link (useless on story generated by script)
      dateCreated: new Date().toString(),
      lastUpdated: new Date().toString(),      // last updated date in unix time format
      seen: false,          // set true if user has opened - if local storage is used, you don't need to care about this

      items: [              // array of items
        // story item example
        {
          //id: "",     // item id
          type: "photo",     // photo or video
          length: 10,   // photo timeout or video length in seconds - uses 3 seconds timeout for images if not set
          src: obj.image,      // photo or video src
          preview: obj.image,  // optional - item thumbnail to show in the story carousel instead of the story defined image
          link: "",     // a link to click on story
          linkText: "", // link text
          // time: new Date().toString(),     // optional a date to display with the story item. unix timestamp are converted to "time ago" format
          seen: false   // set true if current user was read - if local storage is used, you don't need to care about this
        }
      ]
    });


    const user: any = await this.dataProvider.getUser(userId)
      .valueChanges()
      .pipe(take(1))
      .toPromise();

    let { stories } = user;
    if (!stories) {
      stories = [success.key]
    } else {
      stories.push(success.key);
    };


    this.dataProvider.getUser(userId).update({
      stories: stories
    });

    this.alertProvider.showToast('Add Story successfully ..');
    this.loadingProvider.hide();






  }
}
